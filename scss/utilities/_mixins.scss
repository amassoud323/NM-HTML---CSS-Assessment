// Button base styling

@mixin button-base-style {
  display: inline-block;
  padding: 10px 30px;
  margin-bottom: 17px;
  color: $white;
  background-color: $colour-foot-btn;
  border: 1px solid transparent;
  border-radius: 6px;
  border: none;
  font-size: 20px;
  text-align: center;
  vertical-align: middle;
  text-transform: uppercase;
  font-weight: $font-weight--medium;
  letter-spacing: $base--letter-spacing;
  line-height: 35px;
  cursor: pointer;
}

// Button arrow styling

@mixin button-icon {
  svg {
    display: inline;
    vertical-align: middle;
    fill: $white;
    width: 21px;
    height: 35px;
    margin-left: 12px;
  }
}

// Read more buttons
@mixin button-read-more {
  @include button-base-style;
  padding: 5px 15px;
  font-size: 1.063rem;
  border-radius: 3px;
}

// Scrolling logo effect to emulate owl carousel without using JS

// this might need a rewrite in conjunction with _case-studies
@mixin logo-scrollbars {

  .scroll-wrapper {
    overflow-x: clip;
    width: 100%;
    position: relative;
  
    .scroll-container {
      display: flex;
      flex-direction: row;
      flex-wrap: nowrap;
      gap: 75px;
      margin: 50px 0;
    } 
    
    &__content {
      position: relative;
    }

    // Grey base image styling that colourises when hovered (nb using --img tag here does make it slightly limited in scope but i think it's simpler this way as i'm only using the mixin twice)
    & .scroll-logo {
      filter: grayscale(100);
      height: 70px;
      width: auto;

      &:hover {
        filter: none;
      }
    }
  }
}

// 'View more' link styling
@mixin view-more-link {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
  text-decoration: none;
  margin-bottom: 20px;
  font-size: 1.625rem;
  color: $pauper;
  font-weight: $font-weight--bold;
  &:hover { text-decoration: underline; }
  svg {
    @include button-icon;
    fill: $pauper;
    margin-left: 7px;
    height: 26px;
    width: 26px;
  }
}

// Icon styling

@mixin icons {
  display: flex;  
  width: 65px;
  height: 65px;
  align-items: center;
  justify-content: center;
  margin: 0 auto;
  border-radius: 50%;
  svg {
    fill: $white; 
    max-width: 60%;
    max-height: 50%;     
  }  
}

// Paragraph text

@mixin para-style {
  font-size: .8125rem;
  line-height: 1.375rem;
  font-weight: $font-weight--medium;
}

// 'Our Services' card layout properties
@mixin services-layout {
  display: flex;
  flex-wrap: wrap;
  row-gap: 30px;
}


// Colour codes for easy use throughout project without having to manually define each time
@mixin service-colors {
  &--base { --color: #{$bay-view}; }
  &--blue { --color: #{$magical-merlin}; }
  &--green { --color: #{$ufo-green}; }
  &--red { --color: #{$valencia}; }
  &--purple { --color: #{$violet-frog}; }
  &--crimson { --color: #{$radical-red}; }
  &--red-brown { --color: #{$punch}; } 
  &--orange { --color: #{$glistening-dawn}; }
  &--grey { --color: #{$manatee}; }
}

// Colour-codes services section for use in services and dropdown menu
@mixin implement-service-colors {
  @include service-colors;
    &--icon {
      @include icons; 
      background-color: var(--color, $dark-grey);
      margin-bottom: 17px;
    }

    &--read-more {
      @include button-read-more;
      background-color: var(--color, $dark-grey);
    }
  }

// Inverts icon colours specifically for dropdown
@mixin invert-dropdown-colours () {
  background-color: $pauper;
  p {color: $white}

  .dropdown__section--icon {
    background-color: $pauper;
    svg { fill: var(--color); }
  }
}

// Inverts colours of services cards when hovering
@mixin invert-service-colours () {
  background-color: var(--color);
  h2, p { color: white; }

  .services__section--icon {
    background-color: white;
    svg { fill: var(--color); }
  }

  button {
    background-color: $white;
    color: var(--color);
  }
}

// Inverts colours of dropdown elements when hovering
@mixin invert-dropdown-hover () {
  background-color: var(--color);
  p { color: white; }

  .dropdown__section--icon {
    background-color: var(--color);
    svg { fill: white; }
  }
}

// Button hover properties
@mixin button-hover($amount: 85%) {
  @include service-colors;
  &:hover {
    background: color-mix(in srgb, var(--color) $amount, black);
  }
}

// Header searchbar styling
@mixin header-searchbar-mobile {
  display: flex;
  width: 100%;
  margin-top: 15px;
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);

  input[name="search"] {
    color: $dark-grey;
    background-color: $mercury;
    padding: 10px 15px;
    font-size: .875rem;
    font-family: $font-family--primary;
    border: 2px solid rgba(0, 0, 0, .1);
    border-right: none;
    border-radius: 2px 0 0 2px;
    width: 100%;
  }

  button {
    background-color: $mercury;
    border: 2px solid rgba(0, 0, 0, .1);
    border-left: none;
    border-radius: 0 2px 2px 0;
    margin-left: -2px;
  }

  svg {
    height: 20px;
    width: 20px;
    background-color: $mercury;
    color: $colour-foot-btn;
    margin: 0 3px;
  }
}

@mixin header-searchbar-desktop {
  @include header-searchbar-mobile;
  width: 33%;
  margin-top: 0;
  height: 56px;
  input[name="search"] {
    background-color: $white;
    border: 1px solid $grey;
    box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
  }

  button {
    height: 56px;
    --color: #{$manatee};
    background-color: var(--color);
    @include button-hover;
    padding: 0 17px;
    border: none;
    border-radius: 0 3px 3px 0;
    box-shadow: 0 1px 1px rgba(0,0,0,.075);
    cursor: pointer;
    svg {
      background-color: var(--color); // here i need to group together with the parent so they both darken together but can't work out how right now, come back
      fill: white;
      height: 100%;
      width: 23px;
    }
  }
}

// Triangles
@mixin triangle {
  content: "";
  position: absolute;
  top: 100%;
  left: 0;
  transform: translateX(-50%);
  width: 0px;
  height: 0px;
  border-style: solid;
  border-width: 30px 85.5px 0 85.5px;
  transform: rotate(0deg);
  opacity: 0;
  pointer-events: none;
  // Include colour in this format -- border-color: #COLOUR transparent transparent transparent;
}

// Raise-up effect when hovering
@mixin raise-up {
  transition: all 0.5s ease;
  transform: translateY(0);
  &:hover {
    transform: translateY(-10px);
  }
}
